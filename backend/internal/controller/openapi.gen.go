// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TaskPublicationRange.
const (
	TaskPublicationRangeOnlyAuthor  TaskPublicationRange = "only_author"
	TaskPublicationRangeOnlyCompany TaskPublicationRange = "only_company"
)

// Defines values for TaskRequestBodyPublicationRange.
const (
	TaskRequestBodyPublicationRangeOnlyAuthor  TaskRequestBodyPublicationRange = "only_author"
	TaskRequestBodyPublicationRangeOnlyCompany TaskRequestBodyPublicationRange = "only_company"
)

// Company defines model for Company.
type Company struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Result []Task `json:"result"`

	// TotalPageCount すべての検索結果の件数
	TotalPageCount float32 `json:"total_page_count"`
}

// ServerMessage defines model for ServerMessage.
type ServerMessage struct {
	Message string `json:"message"`
}

// SignInRequestBody defines model for SignInRequestBody.
type SignInRequestBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Task defines model for Task.
type Task struct {
	Assignees        []User               `json:"assignees"`
	Author           User                 `json:"author"`
	Company          Company              `json:"company"`
	CreatedAt        string               `json:"created_at"`
	Description      string               `json:"description"`
	Due              openapi_types.Date   `json:"due"`
	Id               openapi_types.UUID   `json:"id"`
	PublicationRange TaskPublicationRange `json:"publication_range"`
	Status           TaskStatus           `json:"status"`
	Title            string               `json:"title"`
	UpdatedAt        string               `json:"updated_at"`
}

// TaskPublicationRange defines model for Task.PublicationRange.
type TaskPublicationRange string

// TaskRequestBody defines model for TaskRequestBody.
type TaskRequestBody struct {
	AssigneeIds      *[]openapi_types.UUID            `json:"assigneeIds,omitempty"`
	Description      *string                          `json:"description,omitempty"`
	Due              *openapi_types.Date              `json:"due,omitempty"`
	PublicationRange *TaskRequestBodyPublicationRange `json:"publication_range,omitempty"`
	StatusId         *openapi_types.UUID              `json:"statusId,omitempty"`
	Title            *string                          `json:"title,omitempty"`
}

// TaskRequestBodyPublicationRange defines model for TaskRequestBody.PublicationRange.
type TaskRequestBodyPublicationRange string

// TaskStatus defines model for TaskStatus.
type TaskStatus struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	UpdatedAt string             `json:"updated_at"`
}

// User defines model for User.
type User struct {
	Company Company             `json:"company"`
	Email   openapi_types.Email `json:"email"`
	Id      openapi_types.UUID  `json:"id"`
	Name    string              `json:"name"`
}

// SearchTaskParams defines parameters for SearchTask.
type SearchTaskParams struct {
	Assignee *string  `form:"assignee,omitempty" json:"assignee,omitempty"`
	Status   *string  `form:"status,omitempty" json:"status,omitempty"`
	Sort     *string  `form:"sort,omitempty" json:"sort,omitempty"`
	Page     *float32 `form:"page,omitempty" json:"page,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody = interface{}

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = TaskRequestBody

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SignInRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/companies/{company_id}/members)
	GetMembers(c *gin.Context, companyId string)

	// (GET /api/companies/{company_id}/search)
	SearchTask(c *gin.Context, companyId string, params SearchTaskParams)

	// (GET /api/companies/{company_id}/task-status)
	GetTaskStatus(c *gin.Context, companyId string)

	// (POST /api/companies/{company_id}/tasks)
	CreateTask(c *gin.Context, companyId string)

	// (DELETE /api/companies/{company_id}/tasks/{task_id})
	DeleteTask(c *gin.Context, companyId string, taskId string)

	// (GET /api/companies/{company_id}/tasks/{task_id})
	GetTask(c *gin.Context, companyId string, taskId string)

	// (PATCH /api/companies/{company_id}/tasks/{task_id})
	UpdateTask(c *gin.Context, companyId string, taskId string)

	// (POST /api/signin)
	SignIn(c *gin.Context)

	// (POST /api/signout)
	SignOut(c *gin.Context)

	// (GET /api/users/me)
	GetMyAccount(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetMembers operation middleware
func (siw *ServerInterfaceWrapper) GetMembers(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMembers(c, companyId)
}

// SearchTask operation middleware
func (siw *ServerInterfaceWrapper) SearchTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchTaskParams

	// ------------- Optional query parameter "assignee" -------------

	err = runtime.BindQueryParameter("form", true, false, "assignee", c.Request.URL.Query(), &params.Assignee)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter assignee: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchTask(c, companyId, params)
}

// GetTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) GetTaskStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskStatus(c, companyId)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c, companyId)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId string

	err = runtime.BindStyledParameter("simple", false, "task_id", c.Param("task_id"), &taskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter task_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, companyId, taskId)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId string

	err = runtime.BindStyledParameter("simple", false, "task_id", c.Param("task_id"), &taskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter task_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c, companyId, taskId)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameter("simple", false, "company_id", c.Param("company_id"), &companyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter company_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId string

	err = runtime.BindStyledParameter("simple", false, "task_id", c.Param("task_id"), &taskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter task_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c, companyId, taskId)
}

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignIn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// GetMyAccount operation middleware
func (siw *ServerInterfaceWrapper) GetMyAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMyAccount(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/companies/:company_id/members", wrapper.GetMembers)
	router.GET(options.BaseURL+"/api/companies/:company_id/search", wrapper.SearchTask)
	router.GET(options.BaseURL+"/api/companies/:company_id/task-status", wrapper.GetTaskStatus)
	router.POST(options.BaseURL+"/api/companies/:company_id/tasks", wrapper.CreateTask)
	router.DELETE(options.BaseURL+"/api/companies/:company_id/tasks/:task_id", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/api/companies/:company_id/tasks/:task_id", wrapper.GetTask)
	router.PATCH(options.BaseURL+"/api/companies/:company_id/tasks/:task_id", wrapper.UpdateTask)
	router.POST(options.BaseURL+"/api/signin", wrapper.SignIn)
	router.POST(options.BaseURL+"/api/signout", wrapper.SignOut)
	router.GET(options.BaseURL+"/api/users/me", wrapper.GetMyAccount)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD///pb3nC2HQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
